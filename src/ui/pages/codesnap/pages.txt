Project Directory: pages
Total Files Analyzed: 17
Total Size: 0.04 MB
Date: 2025-02-13T22:05:02.779Z

Token counts and costs by model:
   GPT-3.5: 11.6K tokens → $0.0175
   GPT-4:   11.6K tokens → $0.3492
   Claude:  11.6K tokens → $0.1746
   LLaMA 2: 12.8K tokens → $0.0256

Directory structure:
├── branch-display/
│   └── branch-display.component.ts
├── error-test/
│   ├── error-test.component.html
│   ├── error-test.component.scss
│   ├── error-test.component.spec.ts
│   └── error-test.component.ts
├── layout/
│   ├── layout.component.html
│   ├── layout.component.scss
│   ├── layout.component.spec.ts
│   └── layout.component.ts
├── login/
│   ├── login.component.html
│   ├── login.component.scss
│   ├── login.component.spec.ts
│   └── login.component.ts
└── profile/
    ├── profile.component.html
    ├── profile.component.scss
    ├── profile.component.spec.ts
    └── profile.component.ts

================================================
File: branch-display/branch-display.component.ts
================================================
import { Component } from '@angular/core';
import { bootstrapApplication } from '@angular/platform-browser';
import { TreeComponent } from '@ui/shared/components/branch-display/branch-display.component';
import { mockTreeData } from '@ui/shared/components/branch-display/mock-data';

@Component({
	selector: 'app-root',
	standalone: true,
	imports: [TreeComponent],
	template: `
		<div class="container">
			<h1>Tree Structure</h1>
			<app-tree [node]="treeData"></app-tree>
		</div>
	`,
	styles: [
		`
			.container {
				padding: 20px;
				max-width: 800px;
				margin: 0 auto;
			}
			h1 {
				color: #333;
				margin-bottom: 20px;
			}
		`,
	],
})
export class AppTree {
	treeData = mockTreeData;
}


================================================
File: error-test/error-test.component.html
================================================
<p>error-test works!</p>


================================================
File: error-test/error-test.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ErrorTestComponent } from './error-test.component';

describe('ErrorTestComponent', () => {
  let component: ErrorTestComponent;
  let fixture: ComponentFixture<ErrorTestComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ErrorTestComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ErrorTestComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


================================================
File: error-test/error-test.component.ts
================================================
// error-test.component.ts
import { Component, inject } from '@angular/core';
import { ToastrService } from 'ngx-toastr';
import { CommonModule } from '@angular/common';
import { ErrorTestService } from '../../../app/services/error-test/error-test.service';

@Component({
	selector: 'app-error-test',
	standalone: true,
	imports: [CommonModule],
	template: `
		<div class="p-4">
			<h2 class="text-2xl font-bold mb-4">Error Testing Component</h2>

			<div class="space-y-4">
				<div>
					<button
						(click)="test404Error()"
						class="px-4 py-2 bg-blue-500 text-white rounded"
					>
						Trigger 404 Error
					</button>
				</div>

				<div>
					<button
						(click)="test500Error()"
						class="px-4 py-2 bg-red-500 text-white rounded"
					>
						Trigger 500 Error
					</button>
				</div>

				<div>
					<button
						(click)="testValidationError()"
						class="px-4 py-2 bg-yellow-500 text-white rounded"
					>
						Trigger Validation Error
					</button>
				</div>

				<div>
					<button
						(click)="testNetworkError()"
						class="px-4 py-2 bg-purple-500 text-white rounded"
					>
						Trigger Network Error
					</button>
				</div>
			</div>
		</div>
	`,
})
export class ErrorTestComponent {
	private errorTestService = inject(ErrorTestService);
	private notificationService = inject(ToastrService);

	test404Error(): void {
		this.errorTestService.testError(404).subscribe({
			error: (error) => {
				console.log('404 Error triggered:', error);
				// Directly use notification service for this specific error
				this.notificationService.warning('Resource not found');
			},
		});
	}

	test500Error(): void {
		this.errorTestService.testError(500).subscribe({
			error: (error) => {
				console.log('500 Error triggered:', error);
				this.notificationService.error('Internal server error occurred');
			},
		});
	}

	testValidationError(): void {
		this.errorTestService.testValidationError().subscribe({
			error: (error) => {
				console.log('Validation Error triggered:', error);
				this.notificationService.warning('Invalid input data');
			},
		});
	}

	testNetworkError(): void {
		this.errorTestService.testNetworkError().subscribe({
			error: (error) => {
				console.log('Network Error triggered:', error);
				this.notificationService.error('Network connection error');
			},
		});
	}
}


================================================
File: layout/layout.component.html
================================================
<div class="min-h-screen bg-gradient-to-b from-gray-900 via-gray-800 to-gray-900">
	<!-- Overlay for mobile -->
	<div
		(click)="toggleSidenav()"
		[class.hidden]="!isSidenavOpen"
		class="fixed inset-0 bg-black bg-opacity-70 lg:hidden z-40 backdrop-blur-sm"
	></div>

	<!-- Sidebar -->
	<aside
		[class.translate-x-0]="isSidenavOpen"
		[class.-translate-x-full]="!isSidenavOpen"
		class="fixed top-0 left-0 h-full w-64 bg-gray-800/50 backdrop-blur-lg border-r border-gray-700/50 text-white z-50 transform transition-transform duration-300 ease-in-out lg:translate-x-0"
	>
		<!-- Logo/Title with AI animation -->
		<div class="h-16 flex items-center justify-between px-6 bg-gray-900/50 border-b border-gray-700/50">
			<div class="flex items-center space-x-3">
				<div class="relative h-8 w-8">
					<div class="absolute inset-0 bg-blue-500/20 rounded-full animate-pulse"></div>
					<div class="absolute inset-1 bg-blue-500/40 rounded-full animate-pulse [animation-delay:0.2s]"></div>
					<div class="absolute inset-2 bg-blue-500/60 rounded-full animate-pulse [animation-delay:0.4s]"></div>
				</div>
				<span
					routerLink="/dashboard/"
					class="text-xl font-bold bg-gradient-to-r from-blue-400 to-blue-600 hover:to-white bg-clip-text text-transparent transition-transform duration-300 ease-in-out hover:scale-105 active:scale-95 hover:animate-pulse"
				>
					AI Analysis
				</span>
			</div>
			<button (click)="toggleSidenav()" class="lg:hidden text-gray-400 hover:text-white transition-colors">
				<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
				</svg>
			</button>
		</div>

		<!-- Navigation -->
		<nav class="mt-6 px-4">
			<div class="space-y-2">
				<a
					routerLink="/dashboard/aichat"
					routerLinkActive="bg-blue-600/20 border-blue-500/50"
					class="flex items-center px-4 py-2.5 text-sm font-medium rounded-lg hover:bg-blue-600/10 transition-all duration-200 border border-transparent hover:border-blue-500/30"
				>
					<svg class="w-5 h-5 mr-3 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
						/>
					</svg>
					<span class="relative">
						AI Chat
						<div class="absolute right-0 top-1/2 -translate-y-1/2 w-1 h-1 bg-blue-400 rounded-full animate-pulse"></div>
					</span>
				</a>

				<!-- Similar styling for other navigation items -->
				<a
					routerLink="/dashboard/users"
					routerLinkActive="bg-blue-600/20 border-blue-500/50"
					class="flex items-center px-4 py-2.5 text-sm font-medium rounded-lg hover:bg-blue-600/10 transition-all duration-200 border border-transparent hover:border-blue-500/30"
				>
					<svg class="w-5 h-5 mr-3 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
						/>
					</svg>
					Utilisateurs
				</a>

				<a
					routerLink="/dashboard/errors"
					routerLinkActive="bg-blue-600/20 border-blue-500/50"
					class="flex items-center px-4 py-2.5 text-sm font-medium rounded-lg hover:bg-blue-600/10 transition-all duration-200 border border-transparent hover:border-blue-500/30"
				>
					<svg class="w-5 h-5 mr-3 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
					</svg>
					Erreurs
				</a>

				<!-- More navigation items... -->
			</div>
		</nav>
		<!-- {{ this.getProfilePicture() | async }} -->

		<!-- User profile -->
		<div class="absolute bottom-0 w-full bg-gray-900/50 p-4 border-t border-gray-700/50">
			<div class="flex items-center">
				<div class="relative flex-shrink-0 cursor-pointer group" routerLink="/dashboard/profile">
					@if (getProfilePicture() | async; as profilePic) {
					<img class="w-8 h-8 rounded-full" [src]="profilePic" alt="Profile picture" (error)="handleImageError($event)" />
					} @else {
					<svg class="w-8 h-8 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z"
						/>
					</svg>
					}
				</div>
				<div class="ml-3">
					<p class="text-sm font-medium text-gray-300">{{ getUserName() }}</p>
					<button (click)="logout()" class="text-xs text-blue-400 hover:text-blue-300 transition-colors duration-200">
						Se déconnecter
					</button>
				</div>
			</div>
		</div>
	</aside>

	<!-- Main content -->
	<div class="lg:pl-64 flex flex-col min-h-screen">
		<!-- Header -->
		<header class="h-16 bg-gray-800/50 backdrop-blur-lg border-b border-gray-700/50 fixed top-0 right-0 left-0 z-30 lg:left-64">
			<div class="h-full px-6 flex items-center justify-between">
				<div class="flex items-center">
					<button (click)="toggleSidenav()" class="lg:hidden mr-4 text-gray-400 hover:text-white transition-colors">
						<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
						</svg>
					</button>
					<h1 class="text-xl text-gray-100 font-medium">
						{{ getCurrentRoute() }}
					</h1>
				</div>
			</div>
		</header>

		<!-- Page content -->
		<main class="flex-1 sm:p-6 mt-16">
			<!-- Neural network animation background -->
			<div class="absolute inset-0 overflow-hidden opacity-10 pointer-events-none">
				<div class="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(59,130,246,0.1),transparent_50%)]"></div>
				<div
					class="absolute w-full h-full bg-[linear-gradient(45deg,transparent_25%,rgba(155,188,246,0.05)_50%,transparent_75%)] bg-[length:10px_10px] animate-[grid-move_20s_linear_infinite]"
				></div>
			</div>
			<router-outlet></router-outlet>
		</main>
	</div>
</div>


================================================
File: layout/layout.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LayoutComponent } from './layout.component';

describe('LayoutComponent', () => {
  let component: LayoutComponent;
  let fixture: ComponentFixture<LayoutComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [LayoutComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(LayoutComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


================================================
File: layout/layout.component.ts
================================================
import { Component } from '@angular/core';
import { Router, RouterModule, RouterOutlet } from '@angular/router';
import { AuthService } from '../../../app/services/_core/auth/auth.service';
import { User } from '@angular/fire/auth';
import {
	BehaviorSubject,
	catchError,
	map,
	Observable,
	of,
	Subscription,
} from 'rxjs';
import { CommonModule } from '@angular/common';
import { DomSanitizer, SafeUrl } from '@angular/platform-browser';
import { ImageService } from '../../../app/services/image/image.service';

@Component({
	selector: 'app-layout',
	imports: [RouterOutlet, RouterModule, CommonModule],
	templateUrl: './layout.component.html',
	styleUrl: './layout.component.scss',
})
export class LayoutComponent {
	isSidenavOpen: boolean = false;
	private subscriptions: Subscription = new Subscription();
	private profilePicture$ = new BehaviorSubject<string>('');

	constructor(
		private authService: AuthService,
		private router: Router,
		private imageService: ImageService,
		private sanitizer: DomSanitizer
	) {}
	ngOnInit() {
		// Subscribe to user changes and update profile picture
		this.subscriptions.add(
			this.authService.user$.subscribe((user: any) => {
				if (user?.picture) {
					this.profilePicture$.next(user.picture);
				}
			})
		);
	}

	ngOnDestroy() {
		this.subscriptions.unsubscribe();
	}
	toggleSidenav(): void {
		this.isSidenavOpen = !this.isSidenavOpen;
	}

	getUserName(): string {
		let userEmail = 'Anonyme';
		this.authService.user$.subscribe({
			next: (user) => {
				if (user?.email) {
					userEmail = user.email;
				}
			},
			error: () => {
				userEmail = 'Anonyme';
			},
		});
		return userEmail;
	}

	handleImageError(event: any) {
		event.target.src = 'assets/images/avatar.png';
	}

	getProfilePicture(): Observable<SafeUrl | false> {
		return this.authService.user$.pipe(
			map((user) => {
				if (!user?.photoURL) {
					return false;
				}
				return this.imageService.convertBase64ToSafeUrl(user.photoURL);
			}),
			catchError(() => of(false))
		);
	}

	hasProfilePicture(): Observable<boolean> {
		return this.profilePicture$
			.asObservable()
			.pipe(map((picture) => !!picture));
	}

	getCurrentRoute(): string {
		const currentUrl = this.router.url;
		const segments = currentUrl.split('/');
		const lastSegment = segments[segments.length - 1];
		const routeMap: { [key: string]: string } = {
			dashboard: 'Dashboard',
			profile: 'Profile',
			errors: 'Error',
		};

		return routeMap[lastSegment] || 'Dashboard';
	}

	logout(): void {
		this.authService.logout().subscribe(() => {
			this.router.navigate(['/login']);
		});
	}

	gotoDashboard(): void {
		this.router.navigate(['/dashboard']);
	}
}


================================================
File: login/login.component.html
================================================
<div
  class="min-h-screen bg-gradient-to-b from-gray-900 via-gray-800 to-gray-900 flex flex-col justify-center py-12 px-4 sm:px-6 lg:px-8"
>
  <div class="sm:mx-auto sm:w-full sm:max-w-md">
    <!-- AI-themed animated logo container -->
    <div class="relative h-32 sm:h-48 mx-auto mb-8">
      <div
        class="absolute inset-0 bg-blue-500/20 rounded-full animate-pulse"
      ></div>
      <div
        class="absolute inset-4 bg-blue-500/40 rounded-full animate-pulse [animation-delay:0.2s]"
      ></div>
      <div
        class="absolute inset-8 bg-blue-500/60 rounded-full animate-pulse [animation-delay:0.4s]"
      ></div>
      <div
        class="absolute inset-0 h-full w-full flex items-center justify-center"
      >
        <span class="text-blue-500 text-4xl font-bold">AI</span>
      </div>
    </div>

    <h2
      class="text-center text-4xl md:text-5xl font-extrabold text-white animate-fade-in"
    >
      AI Analysis Portal
    </h2>
    <p class="mt-4 text-center text-base md:text-lg text-gray-400">
      Access your AI insights or
      <a
        routerLink="/register"
        class="font-medium text-blue-400 hover:text-blue-300 transition-colors duration-200 underline decoration-2 decoration-blue-400/30 hover:decoration-blue-300"
      >
        create a new account
      </a>
    </p>
  </div>

  <div class="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
    <div
      class="bg-gray-800/50 backdrop-blur-lg py-8 px-4 shadow-2xl hover:shadow-blue-500/10 transition-all duration-300 sm:rounded-2xl sm:px-10 border border-gray-700/50"
    >
      <!-- Neural network animation background -->
      <div class="absolute inset-0 overflow-hidden rounded-2xl opacity-10">
        <div
          class="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(59,130,246,0.1),transparent_50%)]"
        ></div>
        <div
          class="absolute w-full h-full bg-[linear-gradient(45deg,transparent_25%,rgba(155,188,246,0.05)_50%,transparent_75%)] bg-[length:10px_10px] animate-[grid-move_20s_linear_infinite]"
        ></div>
      </div>

      <form
        [formGroup]="loginForm"
        (ngSubmit)="onSubmit()"
        class="space-y-6 relative"
      >
        <div>
          <label for="email" class="block text-sm font-medium text-gray-300">
            Email Interface
          </label>
          <div class="mt-1 relative">
            <input
              id="email"
              type="email"
              formControlName="email"
              required
              class="appearance-none block w-full px-3 py-2.5 bg-gray-900/50 border border-gray-600 text-gray-300 rounded-lg shadow-inner placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 sm:text-sm"
            />
            <div
              class="absolute right-3 top-1/2 -translate-y-1/2 w-2 h-2 bg-blue-500 rounded-full animate-pulse"
            ></div>
          </div>
          <div
            *ngIf="
              loginForm.get('email')?.touched && loginForm.get('email')?.invalid
            "
            class="mt-1 text-xs text-red-400 animate-shake"
          >
            Invalid email format detected
          </div>
        </div>

        <div>
          <label for="password" class="block text-sm font-medium text-gray-300">
            Security Key
          </label>
          <div class="mt-1 relative">
            <input
              id="password"
              type="password"
              formControlName="password"
              required
              class="appearance-none block w-full px-3 py-2.5 bg-gray-900/50 border border-gray-600 text-gray-300 rounded-lg shadow-inner placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 sm:text-sm"
            />
            <div
              class="absolute right-3 top-1/2 -translate-y-1/2 w-2 h-2 bg-blue-500 rounded-full animate-pulse"
            ></div>
          </div>
          <div
            *ngIf="
              loginForm.get('password')?.touched &&
              loginForm.get('password')?.invalid
            "
            class="mt-1 text-xs text-red-400 animate-shake"
          >
            Security key required
          </div>
        </div>

        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <input
              type="checkbox"
              id="remember"
              formControlName="remember"
              class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label for="remember" class="ml-2 block text-sm text-gray-300">
              Remember session
            </label>
          </div>
          <a href="#" class="text-sm text-blue-400 hover:text-blue-300"
            >Reset key?</a
          >
        </div>

        <div>
          <button
            type="submit"
            [disabled]="loginForm.invalid || isLoading"
            class="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-lg text-sm font-semibold text-white bg-gradient-to-r from-blue-600 to-blue-800 hover:from-blue-700 hover:to-blue-900 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-blue-500 disabled:opacity-60 disabled:cursor-not-allowed transform transition-all duration-200 hover:scale-[1.02] active:scale-[0.98] group"
          >
            <svg
              *ngIf="isLoading"
              class="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
              fill="none"
              viewBox="0 0 24 24"
            >
              <circle
                class="opacity-25"
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                stroke-width="4"
              ></circle>
              <path
                class="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
              ></path>
            </svg>
            <span
              class="group-hover:tracking-wider transition-all duration-200"
            >
              {{ isLoading ? "Initializing..." : "Initialize Session" }}
            </span>
          </button>
        </div>

        <div class="relative my-6">
          <div class="absolute inset-0 flex items-center">
            <div class="w-full border-t border-gray-600"></div>
          </div>
          <div class="relative flex justify-center text-sm">
            <span class="px-2 bg-gray-800 text-gray-400">Or continue with</span>
          </div>
        </div>

        <button
          type="button"
          (click)="signInWithGoogle()"
          class="w-full flex items-center justify-center gap-3 py-2 px-4 border border-gray-600 rounded-lg shadow-sm text-sm font-medium text-gray-300 bg-gray-900/50 hover:bg-gray-900/70 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          <img
            src="https://www.google.com/favicon.ico"
            alt="Google"
            class="w-5 h-5"
          />
          Sign in with Google
        </button>

        <div
          *ngIf="error"
          class="mt-4 text-sm text-red-400 text-center bg-red-900/20 border border-red-900/50 p-3 rounded-lg animate-shake"
        >
          {{ error }}
        </div>
      </form>
    </div>
  </div>
</div>


================================================
File: login/login.component.scss
================================================
@keyframes shake {
  0%,
  100% {
    transform: translateX(0);
  }
  25% {
    transform: translateX(-5px);
  }
  75% {
    transform: translateX(5px);
  }
}

@keyframes grid-move {
  0% {
    background-position: 0 0;
  }
  100% {
    background-position: 50px 50px;
  }
}

.animate-shake {
  animation: shake 0.5s ease-in-out;
}

.animate-fade-in {
  animation: fadeIn 0.5s ease-in;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}


================================================
File: login/login.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LoginComponent } from './login.component';

describe('LoginComponent', () => {
  let component: LoginComponent;
  let fixture: ComponentFixture<LoginComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [LoginComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


================================================
File: login/login.component.ts
================================================
import { CommonModule } from '@angular/common';
import { Component, NgZone, OnInit } from '@angular/core';
import {
	FormBuilder,
	FormGroup,
	ReactiveFormsModule,
	Validators,
} from '@angular/forms';
import { Router, RouterModule } from '@angular/router';
import { finalize, map } from 'rxjs';
import { AuthService } from '../../../app/services/_core/auth/auth.service';

@Component({
	selector: 'app-login',
	standalone: true,
	imports: [CommonModule, RouterModule, ReactiveFormsModule],
	templateUrl: './login.component.html',
	styleUrls: ['./login.component.scss'],
})
export class LoginComponent implements OnInit {
	loginForm: FormGroup;
	isLoading = false;
	error: string | null = null;

	constructor(
		private fb: FormBuilder,
		private authService: AuthService,
		private router: Router,
		private ngZone: NgZone
	) {
		this.loginForm = this.fb.group({
			email: ['', [Validators.required, Validators.email]],
			password: ['', [Validators.required, Validators.minLength(6)]],
			remember: [false],
		});
	}

	ngOnInit(): void {
		this.authService.getCurrentUser().subscribe((result) => {
			console.log('LoginComponent - getCurrentUser:', result);
			if (result.email && result.data.uid) {
				console.log('Utilisateur trouvé - redirection vers le tableau de bord');
				this.router.navigate(['/dashboard']);
			}
		});
	}

	onSubmit(): void {
		if (this.loginForm.valid && !this.isLoading) {
			this.isLoading = true;
			this.error = null;

			const email = this.loginForm.get('email')?.value;
			const password = this.loginForm.get('password')?.value;

			this.authService
				.login(email, password)
				.pipe(finalize(() => (this.isLoading = false)))
				.subscribe({
					next: () => {
						this.ngZone.run(() => {
							console.log('Login success');
							console.log('redirecting to dashboard');
							this.router.navigate(['/dashboard']);
						});
					},
					error: (err) => {
						this.error =
							err.error?.message || 'Login failed. Please try again.';
					},
				});
		}
	}

	async signInWithGoogle() {
		try {
			this.isLoading = true;
			await this.authService.signInWithGoogle();
			await this.router.navigate(['/dashboard']);
		} catch (error) {
			this.error = 'Google sign-in failed. Please try again.';
		} finally {
			this.isLoading = false;
		}
	}
}


================================================
File: profile/profile.component.html
================================================
<div class="p-3 sm:p-6 max-w-4xl mx-auto">
	<h1 class="text-xl sm:text-2xl font-bold text-white mb-4 sm:mb-6">Profil & Paramètres</h1>

	<div class="bg-white rounded-lg shadow divide-y">
		<!-- Loading, Error, Success Messages -->
		<div class="p-4 sm:p-6">
			<div *ngIf="loading" class="flex justify-center items-center py-4">
				<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
			</div>

			<div *ngIf="error" class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4">
				{{ error }}
			</div>

			<div *ngIf="successMessage" class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4">
				{{ successMessage }}
			</div>
		</div>

		<!-- Informations personnelles -->
		<form (ngSubmit)="updateProfile()" #personalForm="ngForm" class="p-4 sm:p-6">
			<h2 class="text-lg font-semibold mb-4">Informations personnelles</h2>
			<div class="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
				<div class="col-span-1">
					<label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
					<input
						type="email"
						[(ngModel)]="profile.email"
						name="email"
						disabled
						class="mt-1 block w-full px-4 py-2.5 rounded-lg border border-gray-300 bg-gray-100 text-gray-500 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm sm:text-base"
						required
					/>
				</div>
				<div class="col-span-1">
					<label class="block text-sm font-medium text-gray-700 mb-1">Téléphone</label>
					<input
						type="tel"
						[(ngModel)]="profile.phone"
						name="phone"
						class="mt-1 block w-full px-4 py-2.5 rounded-lg border border-gray-300 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm sm:text-base hover:border-gray-400"
					/>
				</div>
			</div>
			<div class="mt-4 sm:mt-6">
				<button
					type="submit"
					[disabled]="loading"
					class="w-full sm:w-auto bg-blue-600 text-white px-6 py-2.5 rounded-lg shadow-sm hover:bg-blue-700 transition duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
				>
					{{ loading ? 'Enregistrement...' : 'Enregistrer les modifications' }}
				</button>
			</div>
		</form>

		<!-- Comptes liés -->
		<div class="p-4 sm:p-6 border-t">
			<h2 class="text-lg font-semibold mb-4">Comptes liés</h2>
			<div class="space-y-4">
				<!-- Email Provider -->
				<div class="flex items-center justify-between">
					<div class="flex items-center space-x-3">
						<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
							/>
						</svg>
						<div>
							<p class="font-medium">Compte email</p>
							<p class="text-sm text-gray-500">{{ profile.email }}</p>
						</div>
					</div>
					<span class="px-3 py-1 text-sm text-green-700 bg-green-100 rounded-full">Principal</span>
				</div>

				<!-- Google Provider -->
				<div class="flex items-center justify-between">
					<div class="flex items-center space-x-3">
						<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" viewBox="0 0 48 48">
							<path
								fill="#FFC107"
								d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12s5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24s8.955,20,20,20s20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"
							/>
							<path
								fill="#FF3D00"
								d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"
							/>
							<path
								fill="#4CAF50"
								d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"
							/>
							<path
								fill="#1976D2"
								d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571c0.001-0.001,0.002-0.001,0.003-0.002l6.19,5.238C36.971,39.205,44,34,44,24C44,22.659,43.862,21.35,43.611,20.083z"
							/>
						</svg>
						<div>
							<p class="font-medium">Compte Google</p>
							<p class="text-sm text-gray-500" *ngIf="isGoogleLinked">Compte lié</p>
							<p class="text-sm text-gray-500" *ngIf="!isGoogleLinked">Non lié</p>
						</div>
					</div>
					<button
						*ngIf="!isGoogleLinked"
						(click)="linkGoogleAccount()"
						[disabled]="loading"
						class="px-4 py-2 text-sm font-medium text-blue-600 bg-blue-50 rounded-lg hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
					>
						Lier le compte
					</button>
					<button
						*ngIf="isGoogleLinked"
						(click)="unlinkGoogleAccount()"
						[disabled]="loading"
						class="px-4 py-2 text-sm font-medium text-red-600 bg-red-50 rounded-lg hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
					>
						Délier le compte
					</button>
				</div>
			</div>
		</div>

		<!-- Entreprise -->
		<form (ngSubmit)="updateProfile()" #companyForm="ngForm" class="p-4 sm:p-6">
			<h2 class="text-lg font-semibold mb-4">Informations de l'entreprise</h2>
			<div class="space-y-4">
				<div>
					<label class="block text-sm font-medium text-gray-700 mb-1">Nom de l'entreprise</label>
					<input
						type="text"
						[(ngModel)]="profile.company_name"
						name="company_name"
						class="mt-1 block w-full px-4 py-2.5 rounded-lg border border-gray-300 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm sm:text-base hover:border-gray-400"
						required
					/>
				</div>
				<div>
					<label class="block text-sm font-medium text-gray-700 mb-1">Adresse</label>
					<textarea
						[(ngModel)]="profile.address"
						name="address"
						rows="3"
						class="mt-1 block w-full px-4 py-2.5 rounded-lg border border-gray-300 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm sm:text-base hover:border-gray-400 resize-none"
					></textarea>
				</div>
				<div class="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
					<div>
						<label class="block text-sm font-medium text-gray-700 mb-1">SIRET</label>
						<input
							type="text"
							[(ngModel)]="profile.siret"
							name="siret"
							class="mt-1 block w-full px-4 py-2.5 rounded-lg border border-gray-300 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm sm:text-base hover:border-gray-400"
						/>
					</div>
				</div>
			</div>
			<div class="mt-4 sm:mt-6">
				<button
					type="submit"
					[disabled]="loading"
					class="w-full sm:w-auto bg-blue-600 text-white px-6 py-2.5 rounded-lg shadow-sm hover:bg-blue-700 transition duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
				>
					{{ loading ? 'Enregistrement...' : 'Enregistrer les modifications' }}
				</button>
			</div>
		</form>

		<!-- Paramètres -->
		<div class="p-4 sm:p-6">
			<h2 class="text-lg font-semibold mb-4">Paramètres</h2>
			<div class="space-y-6">
				<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-2 sm:space-y-0">
					<div class="flex-grow">
						<h3 class="font-medium">Notifications par email</h3>
						<p class="text-sm text-gray-500">Recevoir des notifications pour les nouveaux KYLs</p>
					</div>
					<label class="relative inline-flex items-center cursor-pointer self-start sm:self-center">
						<input
							type="checkbox"
							(click)="switchNotificationState()"
							[(ngModel)]="profile.notification"
							[disabled]="loading"
							class="sr-only peer"
						/>
						<div
							class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"
						></div>
					</label>
				</div>
			</div>
		</div>

		<!-- Sécurité -->
		<div class="p-4 sm:p-6">
			<h2 class="text-lg font-semibold mb-4">Sécurité</h2>
			<div class="flex flex-col gap-4">
				<div *ngIf="showPasswordFields" class="space-y-4">
					<div>
						<label class="block text-sm font-medium text-gray-700 mb-1">Ancien mot de passe</label>
						<input
							type="password"
							[(ngModel)]="lastPassword"
							name="lastPassword"
							class="mt-1 block w-full px-4 py-2.5 rounded-lg border border-gray-300 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm sm:text-base hover:border-gray-400"
						/>
					</div>
					<div>
						<label class="block text-sm font-medium text-gray-700 mb-1">Nouveau mot de passe</label>
						<input
							type="password"
							[(ngModel)]="newPassword"
							name="newPassword"
							class="mt-1 block w-full px-4 py-2.5 rounded-lg border border-gray-300 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm sm:text-base hover:border-gray-400"
						/>
					</div>
					<div>
						<label class="block text-sm font-medium text-gray-700 mb-1">Confirmer le mot de passe</label>
						<input
							type="password"
							[(ngModel)]="confirmPassword"
							name="confirmPassword"
							class="mt-1 block w-full px-4 py-2.5 rounded-lg border border-gray-300 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm sm:text-base hover:border-gray-400"
						/>
					</div>
				</div>
				<div class="flex flex-col sm:flex-row gap-2">
					<button
						*ngIf="!showPasswordFields"
						(click)="showPasswordFields = true"
						[disabled]="loading"
						class="w-full sm:w-auto px-6 py-2.5 border-2 border-blue-600 text-blue-600 rounded-lg hover:bg-blue-50 transition duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
					>
						Changer le mot de passe
					</button>
					<button
						*ngIf="showPasswordFields"
						(click)="changePassword()"
						[disabled]="loading || !validatePasswords()"
						class="w-full sm:w-auto px-6 py-2.5 border-2 border-blue-600 text-blue-600 rounded-lg hover:bg-blue-50 transition duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
					>
						{{ loading ? 'Validation...' : 'Valider' }}
					</button>
					<button
						*ngIf="showPasswordFields"
						(click)="showPasswordFields = false"
						[disabled]="loading"
						class="w-full sm:w-auto px-6 py-2.5 border-2 border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
					>
						Annuler
					</button>
				</div>
			</div>
		</div>
	</div>
</div>


================================================
File: profile/profile.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ProfileComponent } from './profile.component';

describe('ProfilComponent', () => {
	let component: ProfileComponent;
	let fixture: ComponentFixture<ProfileComponent>;

	beforeEach(async () => {
		await TestBed.configureTestingModule({
			imports: [ProfileComponent],
		}).compileComponents();

		fixture = TestBed.createComponent(ProfileComponent);
		component = fixture.componentInstance;
		fixture.detectChanges();
	});

	it('should create', () => {
		expect(component).toBeTruthy();
	});
});


================================================
File: profile/profile.component.ts
================================================
import { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { Profile } from '../../../app/services/profile-service/profile.interface';
import { ProfileService } from '../../../app/services/profile-service/profile.service';
import { AuthService } from '../../../app/services/_core/auth/auth.service';

@Component({
	selector: 'app-profile',
	templateUrl: './profile.component.html',
	imports: [CommonModule, FormsModule],
	standalone: true,
})
export class ProfileComponent implements OnInit, OnDestroy {
	profile: Profile = {
		email: '',
		firstname: '',
		lastname: '',
		company_name: '',
		address: '',
		siret: '',
		notification: false,
		phone: '',
		authProvider: '',
		linkedAccounts: [],
	};

	backupProfile: Profile;
	showPasswordFields = false;
	newPassword = '';
	lastPassword = '';
	confirmPassword = '';
	isGoogleLinked = false;
	private destroy$ = new Subject<void>();
	loading = false;
	error: string | null = null;
	successMessage: string | null = null;
	constructor(
		private profileService: ProfileService,
		private authService: AuthService
	) {
		this.backupProfile = { ...this.profile };
	}

	ngOnInit(): void {
		this.profileService
			.getProfile()
			.pipe(takeUntil(this.destroy$))
			.subscribe({
				next: (profile) => {
					this.profile = profile;
					this.backupProfile = { ...profile };
					this.isGoogleLinked =
						(profile.linkedAccounts && profile.linkedAccounts.length > 1) ||
						false;
				},
				error: (error) => {
					console.error('Error loading profile:', error);
				},
			});
	}

	ngOnDestroy(): void {
		this.destroy$.next();
		this.destroy$.complete();
	}

	updateProfile(): void {
		this.loading = true;
		this.error = null;
		this.successMessage = null;

		this.profileService.updateProfile(this.profile).subscribe({
			next: (profile) => {
				this.loading = false;
				this.backupProfile = { ...profile };
				this.successMessage = 'Profil mis à jour avec succès';
				setTimeout(() => (this.successMessage = null), 3000);
			},
			error: (err) => {
				this.loading = false;
				this.profile = { ...this.backupProfile };
				console.error('Erreur lors de la mise à jour du profil:', err);
				this.error =
					'Erreur lors de la mise à jour du profil. Veuillez réessayer.';
			},
		});
	}

	async linkGoogleAccount(): Promise<void> {
		try {
			this.loading = true;
			this.error = null;
			await this.profileService.linkWithGoogle();
			this.isGoogleLinked = true;
			this.successMessage = 'Compte Google lié avec succès';
			setTimeout(() => (this.successMessage = null), 3000);
		} catch (error) {
			console.error('Error linking Google account:', error);
			this.error = 'Erreur lors de la liaison du compte Google';
		} finally {
			this.loading = false;
		}
	}

	async unlinkGoogleAccount(): Promise<void> {
		try {
			this.loading = true;
			this.error = null;
			await this.profileService.unlinkProvider('google.com');
			this.isGoogleLinked = false;
			this.successMessage = 'Compte Google délié avec succès';
			setTimeout(() => (this.successMessage = null), 3000);
		} catch (error) {
			console.error('Error unlinking Google account:', error);
			this.error = 'Erreur lors de la déliaison du compte Google';
		} finally {
			this.loading = false;
		}
	}

	switchNotificationState(): void {
		this.profileService.switchNotificationState().subscribe({
			next: (state) => {
				this.profile.notification = state;
				this.backupProfile.notification = state;
			},
			error: (error) => {
				this.profile.notification = !this.profile.notification;
				console.error('Error switching notification state:', error);
				// Show error message
			},
		});
	}

	changePassword(): void {
		if (!this.validatePasswords()) return;

		this.profileService
			.updatePassword(this.lastPassword, this.newPassword)
			.subscribe({
				next: () => {
					this.resetPasswordFields();
					// Afficher le message de succès
				},
				error: (error: any) => {
					console.error('Erreur lors du changement de mot de passe:', error);
					// Afficher le message d'erreur
				},
			});
	}

	validatePasswords(): boolean {
		return !!(
			this.newPassword &&
			this.confirmPassword &&
			this.lastPassword &&
			this.newPassword === this.confirmPassword
		);
	}

	private resetPasswordFields(): void {
		this.showPasswordFields = false;
		this.newPassword = '';
		this.confirmPassword = '';
		this.lastPassword = '';
	}
}

