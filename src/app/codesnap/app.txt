Project Directory: app
Total Files Analyzed: 32
Total Size: 0.05 MB
Date: 2025-02-07T22:42:52.288Z

Token counts and costs by model:
   GPT-3.5: 10.9K tokens → $0.0163
   GPT-4:   10.9K tokens → $0.3269
   Claude:  10.9K tokens → $0.1635
   LLaMA 2: 12.0K tokens → $0.0240

Directory structure:
├── guards/
│   ├── auth.guard.ts
│   ├── auth.interceptor.ts
│   └── non-auth.guard.ts
├── pages/
│   ├── layout/
│   │   ├── layout.component.html
│   │   ├── layout.component.scss
│   │   ├── layout.component.spec.ts
│   │   └── layout.component.ts
│   ├── login/
│   │   ├── login.component.html
│   │   ├── login.component.scss
│   │   ├── login.component.spec.ts
│   │   └── login.component.ts
│   └── profil/
│       ├── profil.component.html
│       ├── profil.component.scss
│       ├── profil.component.spec.ts
│       └── profil.component.ts
├── services/
│   ├── _core/
│   │   ├── auth/
│   │   │   ├── auth.explain.txt
│   │   │   ├── auth.service.spec.ts
│   │   │   └── auth.service.ts
│   │   ├── rest/
│   │   │   ├── rest.service.spec.ts
│   │   │   └── rest.service.ts
│   │   └── token/
│   │       ├── token.service.spec.ts
│   │       └── token.service.ts
│   ├── auth/
│   │   ├── google.service.spec.ts
│   │   └── google.service.ts
│   └── profil-service/
│       ├── profil.service.spec.ts
│       └── profil.service.ts
├── app.component.html
├── app.component.scss
├── app.component.spec.ts
├── app.component.ts
├── app.config.ts
└── app.routes.ts

================================================
File: app.component.html
================================================
<router-outlet></router-outlet>

================================================
File: app.component.spec.ts
================================================
import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have the 'kyl' title`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('kyl');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, kyl');
  });
});


================================================
File: app.component.ts
================================================
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { AuthInterceptor } from './guards/auth.interceptor';

@Component({
  selector: 'app-root',
  imports: [RouterOutlet],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss'], // Fix typo: `styleUrl` to `styleUrls`
  providers: [
    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },
  ],
})
export class AppComponent {
  title = 'kyl';
}


================================================
File: app.config.ts
================================================
import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter, withHashLocation } from '@angular/router';
import { provideAnimations } from '@angular/platform-browser/animations';
import { provideHttpClient } from '@angular/common/http';
import { routes } from './app.routes';
import { provideAnimationsAsync } from '@angular/platform-browser/animations/async';
import { initializeApp, provideFirebaseApp } from '@angular/fire/app';
import { firebaseConfig } from '../environments/firebaseConfig';
import { getAuth, provideAuth } from '@angular/fire/auth';

export const appConfig: ApplicationConfig = {
  providers: [
    provideZoneChangeDetection({ eventCoalescing: true }),
    provideRouter(
      routes
      // withHashLocation()
    ),
    provideAnimations(),
    provideAnimationsAsync(),
    provideHttpClient(),
    provideFirebaseApp(() => initializeApp(firebaseConfig)),
    provideAuth(() => getAuth()),
  ],
};


================================================
File: app.routes.ts
================================================
import { Routes } from '@angular/router';
import { AuthGuard } from './guards/auth.guard';
import { NonAuthGuard } from './guards/non-auth.guard';
import { LayoutComponent } from './pages/layout/layout.component';

export const routes: Routes = [
  { path: '', redirectTo: 'login', pathMatch: 'full' },
  {
    path: 'login',
    loadComponent: () =>
      import('./pages/login/login.component').then((m) => m.LoginComponent),
    canActivate: [NonAuthGuard],
  },
  {
    path: 'dashboard',
    component: LayoutComponent,
    canActivate: [AuthGuard],
    children: [
      {
        path: '',
        loadComponent: () =>
          import('./pages/layout/layout.component').then(
            (m) => m.LayoutComponent
          ),
      },
    ],
  },
  { path: '**', redirectTo: 'login' },
];


================================================
File: guards/auth.guard.ts
================================================
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { Observable, map, take } from 'rxjs';
import { AuthService } from '../services/_core/auth/auth.service';

@Injectable({
  providedIn: 'root',
})
export class AuthGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(): Observable<boolean> {
    return this.authService.user$.pipe(
      take(1),
      map((user) => {
        const isAuthenticated = !!user;
        if (!isAuthenticated) {
          this.router.navigate(['/login']);
        }
        return isAuthenticated;
      })
    );
  }
}


================================================
File: guards/auth.interceptor.ts
================================================
import { Injectable } from '@angular/core';
import {
  HttpInterceptor,
  HttpRequest,
  HttpHandler,
  HttpEvent,
} from '@angular/common/http';
import { catchError, Observable, switchMap, throwError } from 'rxjs';
import { TokenService } from '../services/_core/token/token.service';
import { AuthService } from '../services/_core/auth/auth.service';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  constructor(
    private authService: AuthService,
    private tokenService: TokenService
  ) {}

  intercept(
    req: HttpRequest<any>,
    next: HttpHandler
  ): Observable<HttpEvent<any>> {
    const refreshToken = this.tokenService.getIdToken();

    // If there's an access token, attach it to the request headers
    if (refreshToken) {
      const clonedRequest = req.clone({
        headers: req.headers.set('Authorization', `Bearer ${refreshToken}`),
      });
      return next.handle(clonedRequest).pipe(
        catchError((error) => {
          // If the token is expired (401 error), refresh the token and retry the request
          if (error.status === 401) {
            return this.handle401Error(req, next);
          }
          return throwError(() => error);
        })
      );
    }

    // If no token, proceed with the request as is
    return next.handle(req);
  }

  private handle401Error(
    req: HttpRequest<any>,
    next: HttpHandler
  ): Observable<HttpEvent<any>> {
    return this.tokenService.refreshIdToken().pipe(
      switchMap(() => {
        // Retry the request with the new access token
        const newIdToken = this.tokenService.getIdToken();
        if (newIdToken) {
          const clonedRequest = req.clone({
            headers: req.headers.set('Authorization', `Bearer ${newIdToken}`),
          });
          return next.handle(clonedRequest);
        }
        return next.handle(req);
      }),
      catchError((error) => {
        // If refresh token fails, logout the user
        this.authService.logout();
        return throwError(() => error);
      })
    );
  }
}


================================================
File: guards/non-auth.guard.ts
================================================
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { Observable, map, take } from 'rxjs';
import { AuthService } from '../services/_core/auth/auth.service';

@Injectable({
  providedIn: 'root',
})
export class NonAuthGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(): Observable<boolean> {
    return this.authService.user$.pipe(
      take(1),
      map((user) => {
        if (!user) {
          return true;
        }

        this.router.navigate(['/dashboard']);
        return false;
      })
    );
  }
}


================================================
File: pages/layout/layout.component.html
================================================
<div
  class="min-h-screen bg-gradient-to-b from-gray-900 via-gray-800 to-gray-900"
>
  <!-- Overlay for mobile -->
  <div
    (click)="toggleSidenav()"
    [class.hidden]="!isSidenavOpen"
    class="fixed inset-0 bg-black bg-opacity-70 lg:hidden z-40 backdrop-blur-sm"
  ></div>

  <!-- Sidebar -->
  <aside
    [class.translate-x-0]="isSidenavOpen"
    [class.-translate-x-full]="!isSidenavOpen"
    class="fixed top-0 left-0 h-full w-64 bg-gray-800/50 backdrop-blur-lg border-r border-gray-700/50 text-white z-50 transform transition-transform duration-300 ease-in-out lg:translate-x-0"
  >
    <!-- Logo/Title with AI animation -->
    <div
      class="h-16 flex items-center justify-between px-6 bg-gray-900/50 border-b border-gray-700/50"
    >
      <div class="flex items-center space-x-3">
        <div class="relative h-8 w-8">
          <div
            class="absolute inset-0 bg-blue-500/20 rounded-full animate-pulse"
          ></div>
          <div
            class="absolute inset-1 bg-blue-500/40 rounded-full animate-pulse [animation-delay:0.2s]"
          ></div>
          <div
            class="absolute inset-2 bg-blue-500/60 rounded-full animate-pulse [animation-delay:0.4s]"
          ></div>
        </div>
        <span
          class="text-xl font-bold bg-gradient-to-r from-blue-400 to-blue-600 bg-clip-text text-transparent"
        >
          AI Analysis
        </span>
      </div>
      <button
        (click)="toggleSidenav()"
        class="lg:hidden text-gray-400 hover:text-white transition-colors"
      >
        <svg
          class="w-6 h-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"
          />
        </svg>
      </button>
    </div>

    <!-- Navigation -->
    <nav class="mt-6 px-4">
      <div class="space-y-2">
        <a
          routerLink="/dashboard/aichat"
          routerLinkActive="bg-blue-600/20 border-blue-500/50"
          class="flex items-center px-4 py-2.5 text-sm font-medium rounded-lg hover:bg-blue-600/10 transition-all duration-200 border border-transparent hover:border-blue-500/30"
        >
          <svg
            class="w-5 h-5 mr-3 text-blue-400"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
            />
          </svg>
          <span class="relative">
            AI Chat
            <div
              class="absolute right-0 top-1/2 -translate-y-1/2 w-1 h-1 bg-blue-400 rounded-full animate-pulse"
            ></div>
          </span>
        </a>

        <!-- Similar styling for other navigation items -->
        <a
          routerLink="/dashboard/users"
          routerLinkActive="bg-blue-600/20 border-blue-500/50"
          class="flex items-center px-4 py-2.5 text-sm font-medium rounded-lg hover:bg-blue-600/10 transition-all duration-200 border border-transparent hover:border-blue-500/30"
        >
          <svg
            class="w-5 h-5 mr-3 text-blue-400"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
            />
          </svg>
          Utilisateurs
        </a>

        <!-- More navigation items... -->
      </div>
    </nav>

    <!-- User profile -->
    <div
      class="absolute bottom-0 w-full bg-gray-900/50 p-4 border-t border-gray-700/50"
    >
      <div class="flex items-center">
        <div
          class="relative flex-shrink-0 cursor-pointer group"
          routerLink="/dashboard/profil"
        >
          <div
            class="w-8 h-8 bg-blue-500/20 rounded-full group-hover:animate-pulse"
          ></div>
          <svg
            class="w-8 h-8 text-blue-400 absolute inset-0"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z"
            />
          </svg>
        </div>
        <div class="ml-3">
          <p class="text-sm font-medium text-gray-300">{{ getUserName() }}</p>
          <button
            (click)="logout()"
            class="text-xs text-blue-400 hover:text-blue-300 transition-colors duration-200"
          >
            Se déconnecter
          </button>
        </div>
      </div>
    </div>
  </aside>

  <!-- Main content -->
  <div class="lg:pl-64 flex flex-col min-h-screen">
    <!-- Header -->
    <header
      class="h-16 bg-gray-800/50 backdrop-blur-lg border-b border-gray-700/50 fixed top-0 right-0 left-0 z-30 lg:left-64"
    >
      <div class="h-full px-6 flex items-center justify-between">
        <div class="flex items-center">
          <button
            (click)="toggleSidenav()"
            class="lg:hidden mr-4 text-gray-400 hover:text-white transition-colors"
          >
            <svg
              class="w-6 h-6"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 6h16M4 12h16M4 18h16"
              />
            </svg>
          </button>
          <h1 class="text-xl text-gray-100 font-medium">
            {{ getCurrentRoute() }}
          </h1>
        </div>
      </div>
    </header>

    <!-- Page content -->
    <main class="flex-1 sm:p-6 mt-16">
      <!-- Neural network animation background -->
      <div
        class="absolute inset-0 overflow-hidden opacity-10 pointer-events-none"
      >
        <div
          class="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(59,130,246,0.1),transparent_50%)]"
        ></div>
        <div
          class="absolute w-full h-full bg-[linear-gradient(45deg,transparent_25%,rgba(155,188,246,0.05)_50%,transparent_75%)] bg-[length:10px_10px] animate-[grid-move_20s_linear_infinite]"
        ></div>
      </div>
      <router-outlet></router-outlet>
    </main>
  </div>
</div>


================================================
File: pages/layout/layout.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LayoutComponent } from './layout.component';

describe('LayoutComponent', () => {
  let component: LayoutComponent;
  let fixture: ComponentFixture<LayoutComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [LayoutComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(LayoutComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


================================================
File: pages/layout/layout.component.ts
================================================
import { Component } from '@angular/core';
import { Router, RouterModule, RouterOutlet } from '@angular/router';
import { AuthService } from '../../services/_core/auth/auth.service';
import { User } from '@angular/fire/auth';

@Component({
  selector: 'app-layout',
  imports: [RouterOutlet, RouterModule],
  templateUrl: './layout.component.html',
  styleUrl: './layout.component.scss',
})
export class LayoutComponent {
  isSidenavOpen: boolean = false;

  constructor(private authService: AuthService, private router: Router) {}

  toggleSidenav(): void {
    this.isSidenavOpen = !this.isSidenavOpen;
  }

  getUserName(): string {
    let userEmail = 'Anonyme';
    this.authService.getCurrentUser().subscribe({
      next: (user) => {
        if (user?.email) {
          userEmail = user.email;
        }
      },
      error: () => {
        userEmail = 'Anonyme';
      },
    });
    return userEmail;
  }

  getCurrentRoute(): string {
    const currentUrl = this.router.url;
    const segments = currentUrl.split('/');
    const lastSegment = segments[segments.length - 1];
    const routeMap: { [key: string]: string } = {
      dashboard: 'Dashboard',
      profil: 'Profil',
      formations: 'Formations',
      kyls: 'KYLs',
      credits: 'Crédits',
      demo: 'Démo',
    };

    return routeMap[lastSegment] || 'Dashboard';
  }

  logout(): void {
    this.authService.logout().subscribe(() => {
      this.router.navigate(['/login']);
    });
  }
}


================================================
File: pages/login/login.component.html
================================================
<div
  class="min-h-screen bg-gradient-to-b from-gray-900 via-gray-800 to-gray-900 flex flex-col justify-center py-12 px-4 sm:px-6 lg:px-8"
>
  <div class="sm:mx-auto sm:w-full sm:max-w-md">
    <!-- AI-themed animated logo container -->
    <div class="relative h-32 sm:h-48 mx-auto mb-8">
      <div
        class="absolute inset-0 bg-blue-500/20 rounded-full animate-pulse"
      ></div>
      <div
        class="absolute inset-4 bg-blue-500/40 rounded-full animate-pulse [animation-delay:0.2s]"
      ></div>
      <div
        class="absolute inset-8 bg-blue-500/60 rounded-full animate-pulse [animation-delay:0.4s]"
      ></div>
      <div
        class="absolute inset-0 h-full w-full flex items-center justify-center"
      >
        <span class="text-blue-500 text-4xl font-bold">AI</span>
      </div>
    </div>

    <h2
      class="text-center text-4xl md:text-5xl font-extrabold text-white animate-fade-in"
    >
      AI Analysis Portal
    </h2>
    <p class="mt-4 text-center text-base md:text-lg text-gray-400">
      Access your AI insights or
      <a
        routerLink="/register"
        class="font-medium text-blue-400 hover:text-blue-300 transition-colors duration-200 underline decoration-2 decoration-blue-400/30 hover:decoration-blue-300"
      >
        create a new account
      </a>
    </p>
  </div>

  <div class="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
    <div
      class="bg-gray-800/50 backdrop-blur-lg py-8 px-4 shadow-2xl hover:shadow-blue-500/10 transition-all duration-300 sm:rounded-2xl sm:px-10 border border-gray-700/50"
    >
      <!-- Neural network animation background -->
      <div class="absolute inset-0 overflow-hidden rounded-2xl opacity-10">
        <div
          class="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(59,130,246,0.1),transparent_50%)]"
        ></div>
        <div
          class="absolute w-full h-full bg-[linear-gradient(45deg,transparent_25%,rgba(155,188,246,0.05)_50%,transparent_75%)] bg-[length:10px_10px] animate-[grid-move_20s_linear_infinite]"
        ></div>
      </div>

      <form
        [formGroup]="loginForm"
        (ngSubmit)="onSubmit()"
        class="space-y-6 relative"
      >
        <div>
          <label for="email" class="block text-sm font-medium text-gray-300">
            Email Interface
          </label>
          <div class="mt-1 relative">
            <input
              id="email"
              type="email"
              formControlName="email"
              required
              class="appearance-none block w-full px-3 py-2.5 bg-gray-900/50 border border-gray-600 text-gray-300 rounded-lg shadow-inner placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 sm:text-sm"
            />
            <div
              class="absolute right-3 top-1/2 -translate-y-1/2 w-2 h-2 bg-blue-500 rounded-full animate-pulse"
            ></div>
          </div>
          <div
            *ngIf="
              loginForm.get('email')?.touched && loginForm.get('email')?.invalid
            "
            class="mt-1 text-xs text-red-400 animate-shake"
          >
            Invalid email format detected
          </div>
        </div>

        <div>
          <label for="password" class="block text-sm font-medium text-gray-300">
            Security Key
          </label>
          <div class="mt-1 relative">
            <input
              id="password"
              type="password"
              formControlName="password"
              required
              class="appearance-none block w-full px-3 py-2.5 bg-gray-900/50 border border-gray-600 text-gray-300 rounded-lg shadow-inner placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 sm:text-sm"
            />
            <div
              class="absolute right-3 top-1/2 -translate-y-1/2 w-2 h-2 bg-blue-500 rounded-full animate-pulse"
            ></div>
          </div>
          <div
            *ngIf="
              loginForm.get('password')?.touched &&
              loginForm.get('password')?.invalid
            "
            class="mt-1 text-xs text-red-400 animate-shake"
          >
            Security key required
          </div>
        </div>

        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <input
              type="checkbox"
              id="remember"
              formControlName="remember"
              class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label for="remember" class="ml-2 block text-sm text-gray-300">
              Remember session
            </label>
          </div>
          <a href="#" class="text-sm text-blue-400 hover:text-blue-300"
            >Reset key?</a
          >
        </div>

        <div>
          <button
            type="submit"
            [disabled]="loginForm.invalid || isLoading"
            class="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-lg text-sm font-semibold text-white bg-gradient-to-r from-blue-600 to-blue-800 hover:from-blue-700 hover:to-blue-900 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-blue-500 disabled:opacity-60 disabled:cursor-not-allowed transform transition-all duration-200 hover:scale-[1.02] active:scale-[0.98] group"
          >
            <svg
              *ngIf="isLoading"
              class="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
              fill="none"
              viewBox="0 0 24 24"
            >
              <circle
                class="opacity-25"
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                stroke-width="4"
              ></circle>
              <path
                class="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
              ></path>
            </svg>
            <span
              class="group-hover:tracking-wider transition-all duration-200"
            >
              {{ isLoading ? "Initializing..." : "Initialize Session" }}
            </span>
          </button>
        </div>

        <div class="relative my-6">
          <div class="absolute inset-0 flex items-center">
            <div class="w-full border-t border-gray-600"></div>
          </div>
          <div class="relative flex justify-center text-sm">
            <span class="px-2 bg-gray-800 text-gray-400">Or continue with</span>
          </div>
        </div>

        <button
          type="button"
          (click)="signInWithGoogle()"
          class="w-full flex items-center justify-center gap-3 py-2 px-4 border border-gray-600 rounded-lg shadow-sm text-sm font-medium text-gray-300 bg-gray-900/50 hover:bg-gray-900/70 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          <img
            src="https://www.google.com/favicon.ico"
            alt="Google"
            class="w-5 h-5"
          />
          Sign in with Google
        </button>

        <div
          *ngIf="error"
          class="mt-4 text-sm text-red-400 text-center bg-red-900/20 border border-red-900/50 p-3 rounded-lg animate-shake"
        >
          {{ error }}
        </div>
      </form>
    </div>
  </div>
</div>


================================================
File: pages/login/login.component.scss
================================================
@keyframes shake {
  0%,
  100% {
    transform: translateX(0);
  }
  25% {
    transform: translateX(-5px);
  }
  75% {
    transform: translateX(5px);
  }
}

@keyframes grid-move {
  0% {
    background-position: 0 0;
  }
  100% {
    background-position: 50px 50px;
  }
}

.animate-shake {
  animation: shake 0.5s ease-in-out;
}

.animate-fade-in {
  animation: fadeIn 0.5s ease-in;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}


================================================
File: pages/login/login.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { LoginComponent } from './login.component';

describe('LoginComponent', () => {
  let component: LoginComponent;
  let fixture: ComponentFixture<LoginComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [LoginComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


================================================
File: pages/login/login.component.ts
================================================
import { Component, NgZone } from '@angular/core';
import {
  FormGroup,
  FormBuilder,
  Validators,
  ReactiveFormsModule,
} from '@angular/forms';
import { CommonModule } from '@angular/common';
import { Router, RouterModule } from '@angular/router';
import { AuthService } from '../../services/_core/auth/auth.service';
import { GoogleAuthService } from '../../services/auth/google.service';
import { finalize } from 'rxjs';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [CommonModule, RouterModule, ReactiveFormsModule],
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss'],
})
export class LoginComponent {
  loginForm: FormGroup;
  isLoading = false;
  error: string | null = null;

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private googleAuthService: GoogleAuthService,
    private router: Router,
    private ngZone: NgZone
  ) {
    this.loginForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6)]],
      remember: [false],
    });
    // Check if already authenticated
    this.authService.user$.subscribe((user) => {
      if (user) {
        this.router.navigate(['/dashboard']);
      }
    });
  }

  onSubmit(): void {
    if (this.loginForm.valid && !this.isLoading) {
      this.isLoading = true;
      this.error = null;

      const email = this.loginForm.get('email')?.value;
      const password = this.loginForm.get('password')?.value;

      this.authService
        .login(email, password)
        .pipe(
          finalize(() => {
            this.isLoading = false;
          })
        )
        .subscribe({
          next: () => {
            // Using NgZone to ensure Angular detects the changes
            this.ngZone.run(() => {
              this.router.navigate(['/dashboard']).then(() => {
                console.log('Navigation attempted from component');
              });
            });
          },
          error: (err) => {
            this.error =
              err.error?.message || 'Login failed. Please try again.';
          },
        });
    }
  }

  async signInWithGoogle() {
    try {
      this.isLoading = true;
      await this.googleAuthService.signInWithGoogle();
      await this.router.navigate(['/dashboard']);
    } catch (error) {
      this.error = 'Google sign-in failed. Please try again.';
    } finally {
      this.isLoading = false;
    }
  }
}


================================================
File: pages/profil/profil.component.html
================================================
<div class="p-3 sm:p-6 max-w-4xl mx-auto">
  <h1 class="text-xl sm:text-2xl font-bold text-white mb-4 sm:mb-6">
    Profile Settings
  </h1>

  <div
    class="bg-gray-800/50 backdrop-blur-lg rounded-lg shadow-lg border border-gray-700/50"
  >
    <!-- User Profile Section -->
    <div class="p-6 flex flex-col items-center">
      <!-- Profile Picture -->
      <div class="relative mb-4">
        <img
          [src]="
            user?.photoURL ||
            'https://ui-avatars.com/api/?background=0D8ABC&color=fff'
          "
          [alt]="user?.displayName || 'Profile'"
          class="w-24 h-24 rounded-full border-4 border-blue-500/30"
        />
        <div
          class="absolute bottom-0 right-0 w-6 h-6 bg-green-500 rounded-full border-4 border-gray-800"
        ></div>
      </div>

      <!-- User Info -->
      <h2 class="text-xl font-semibold text-white mb-1">
        {{ user?.displayName || "Anonymous User" }}
      </h2>
      <p class="text-blue-400 mb-4">{{ user?.email }}</p>

      <!-- Account Details -->
      <div class="w-full max-w-md space-y-4 mt-6">
        <div class="bg-gray-900/50 rounded-lg p-4 border border-gray-700/50">
          <h3 class="text-lg font-medium text-white mb-3">
            Account Information
          </h3>
          <div class="space-y-3">
            <div>
              <label class="block text-sm font-medium text-gray-400"
                >Email</label
              >
              <p class="text-white">{{ user?.email }}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-400"
                >Account Created</label
              >
              <p class="text-white">
                {{ user?.metadata?.creationTime | date : "medium" }}
              </p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-400"
                >Last Sign In</label
              >
              <p class="text-white">
                {{ user?.metadata?.lastSignInTime | date : "medium" }}
              </p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-400"
                >Email Verified</label
              >
              <p class="text-white flex items-center gap-2">
                <span
                  class="w-3 h-3 rounded-full"
                  [class]="user?.emailVerified ? 'bg-green-500' : 'bg-red-500'"
                >
                </span>
                {{ user?.emailVerified ? "Verified" : "Not Verified" }}
              </p>
            </div>
          </div>
        </div>

        <!-- Actions -->
        <div class="flex flex-col sm:flex-row gap-3 mt-6">
          <button
            (click)="signOut()"
            class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-200 flex items-center justify-center gap-2"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"
              />
            </svg>
            Sign Out
          </button>
        </div>
      </div>
    </div>
  </div>
</div>


================================================
File: pages/profil/profil.component.spec.ts
================================================
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ProfilComponent } from './profil.component';

describe('ProfilComponent', () => {
  let component: ProfilComponent;
  let fixture: ComponentFixture<ProfilComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ProfilComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ProfilComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


================================================
File: pages/profil/profil.component.ts
================================================
import { Component } from '@angular/core';
import {
  FormGroup,
  FormBuilder,
  Validators,
  ReactiveFormsModule,
} from '@angular/forms';
import { CommonModule } from '@angular/common';
import { Router, RouterModule } from '@angular/router';
import { AuthService } from '../../services/_core/auth/auth.service';
import { GoogleAuthService } from '../../services/auth/google.service';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [CommonModule, RouterModule, ReactiveFormsModule],
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss'],
})
export class LoginComponent {
  loginForm: FormGroup;
  isLoading = false;
  error: string | null = null;

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private googleAuthService: GoogleAuthService,
    private router: Router
  ) {
    this.loginForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6)]],
      remember: [false],
    });
  }

  onSubmit(): void {
    if (this.loginForm.valid) {
      this.isLoading = true;
      this.error = null;

      this.authService
        .login(
          this.loginForm.get('email')?.value,
          this.loginForm.get('password')?.value
        )
        .subscribe({
          next: () => {
            this.isLoading = false;
            this.router.navigate(['/dashboard']);
          },
          error: (err) => {
            this.isLoading = false;
            this.error =
              err.error?.message || 'Login failed. Please try again.';
          },
        });
    }
  }

  async signInWithGoogle() {
    try {
      await this.googleAuthService.signInWithGoogle();
      this.router.navigate(['/dashboard']);
    } catch (error) {
      this.error = 'Google sign-in failed. Please try again.';
    }
  }
}


================================================
File: services/_core/auth/auth.explain.txt
================================================
Secure Authentication Implementation Guide
===========================================

This guide explains the implementation of a Hybrid Authentication approach using HttpOnly cookies for refreshToken and in-memory refreshToken storage.

Security Overview
----------------
1. HttpOnly Cookie (refreshToken):
   - Protected from XSS via HttpOnly attribute
   - HTTPS-only transmission
   - SameSite protection against CSRF
   - Server-side validation

2. In-Memory Token (refreshToken):
   - Non-persistent storage
   - Short lifespan
   - Cleared on page reload
   - XSS protection

Key Security Features
-------------------
1. Token Rotation
   - New token pair on refresh
   - Server-side invalidation

2. Automatic Session Management
   - Forced logout on invalid tokens
   - Server-side validation

3. Protection Against Common Threats
   - XSS Protection:
     * HttpOnly cookies
     * Memory-only storage
     * Content Security Policy
   
   - CSRF Protection:
     * SameSite cookie attributes
     * CSRF tokens
   
   - Token Security:
     * Short lifespans
     * HTTPS enforcement
     * Token blacklisting

Implementation Guidelines
-----------------------
1. HTTPS Configuration
   - Mandatory for all token operations
   - Secure cookie attributes

2. Token Lifecycle
   - refreshToken: 15-minute lifespan
   - refreshToken: 7-day lifespan
   - Automatic rotation

3. Security Measures
   - Server-side validation
   - Minimal token scopes
   - Strong CSP implementation
   - Activity monitoring
   - Audit logging

Best Practices
-------------
1. Token Management
   - Regular rotation
   - Automatic invalidation
   - Secure storage

2. Monitoring
   - Usage patterns
   - Suspicious activity
   - Token revocation capability

3. Implementation
   - Least privilege principle
   - Comprehensive logging
   - Regular security audits

================================================
File: services/_core/auth/auth.service.spec.ts
================================================
import { TestBed } from '@angular/core/testing';

import { AuthService } from './auth.service';

describe('AuthService', () => {
  let service: AuthService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(AuthService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});


================================================
File: services/_core/auth/auth.service.ts
================================================
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { Observable, BehaviorSubject, throwError } from 'rxjs';
import { catchError, tap, finalize } from 'rxjs/operators';
import { RestService } from '../rest/rest.service';
import { User } from '@angular/fire/auth';
import { environment } from '../../../../../environments/environment';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private userSubject = new BehaviorSubject<User | undefined>(undefined);
  private refreshTokenTimeout?: any;
  private isRefreshing = false;
  private initialCheckDone = false;
  readonly user$ = this.userSubject.asObservable();

  constructor(private restService: RestService, private router: Router) {
    // Only check once when service is initialized
    if (!this.initialCheckDone) {
      this.checkAuthStatus();
    }
  }

  private checkAuthStatus(): void {
    if (this.initialCheckDone || this.isRefreshing) return;

    this.getCurrentUser().subscribe({
      next: (user) => {
        this.userSubject.next(user);
        this.startRefreshTokenTimer();
        this.initialCheckDone = true;
      },
      error: () => {
        this.clearSession();
        this.initialCheckDone = true;
        this.router.navigate(['/login']);
      },
    });
  }

  getCurrentUser(): Observable<User> {
    // Only make the API call if we haven't checked the auth status yet
    if (this.initialCheckDone && this.userSubject.value) {
      return new Observable((subscriber) => {
        subscriber.next(this.userSubject.value);
        subscriber.complete();
      });
    }

    return this.restService.get<User>('/auth/current').pipe(
      tap((user) => {
        this.userSubject.next(user as User);
      }),
      catchError((error) => {
        this.clearSession();
        return throwError(() => error);
      })
    );
  }

  login(email: string, password: string): Observable<any> {
    return this.restService.post<any>('/auth/login', { email, password }).pipe(
      tap((response) => {
        if (response && response.user) {
          this.userSubject.next(response.user);
          // Ensure navigation happens after state update
          setTimeout(() => {
            this.router.navigate(['/dashboard']).then(() => {
              // Optionally log navigation success/failure
              console.log('Navigation complete');
            });
          }, 0);
        }
      }),
      catchError((error) => {
        console.error('Login error:', error);
        return throwError(() => error);
      })
    );
  }

  register(userData: any): Observable<void> {
    return this.restService.post<void>('/auth/register', userData).pipe(
      catchError((error) => {
        console.error('Registration error:', error);
        return throwError(() => error);
      })
    );
  }

  logout(): Observable<void> {
    return this.restService.post<void>('/auth/logout', {}).pipe(
      tap(() => {
        this.clearSession();
        this.router.navigate(['/login']);
      }),
      catchError((error) => {
        console.error('Logout error:', error);
        this.clearSession(); // Still clear session even if API call fails
        return throwError(() => error);
      })
    );
  }

  private clearSession(): void {
    this.userSubject.next(undefined);
    this.stopRefreshTokenTimer();
  }

  isAuthenticated(): boolean {
    return !!this.userSubject.value;
  }

  private startRefreshTokenTimer(): void {
    // Refresh token 1 minute before expiry (14 minutes for 15-minute access token)
    const refreshInterval = 14 * 60 * 1000;

    this.stopRefreshTokenTimer();
    this.refreshTokenTimeout = setInterval(() => {
      this.refreshToken().subscribe();
    }, refreshInterval);
  }

  private refreshToken(): Observable<void> {
    if (this.isRefreshing) {
      return throwError(() => new Error('Token refresh already in progress'));
    }

    this.isRefreshing = true;

    return this.restService.post<void>('/auth/refresh', {}).pipe(
      tap(() => {
        this.startRefreshTokenTimer();
      }),
      catchError((error) => {
        this.clearSession();
        return throwError(() => error);
      }),
      finalize(() => {
        this.isRefreshing = false;
      })
    );
  }

  private stopRefreshTokenTimer(): void {
    if (this.refreshTokenTimeout) {
      clearInterval(this.refreshTokenTimeout);
    }
  }

  ngOnDestroy(): void {
    this.stopRefreshTokenTimer();
    this.userSubject.complete();
  }
}


================================================
File: services/_core/rest/rest.service.spec.ts
================================================
import { TestBed } from '@angular/core/testing';

import { RestService } from './rest.service';

describe('RestService', () => {
  let service: RestService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(RestService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});


================================================
File: services/_core/rest/rest.service.ts
================================================
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { environment } from '../../../../../environments/environment';

@Injectable({
  providedIn: 'root',
})
export class RestService {
  private apiUrl = environment.urlBackend;
  private apiVersion = environment.baseapi;

  constructor(private http: HttpClient) {}

  private createOptions() {
    return {
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
      }),
      withCredentials: true, // Important for sending/receiving cookies
    };
  }

  get<T>(endpoint: string): Observable<T> {
    return this.http
      .get<T>(
        `${this.apiUrl}${this.apiVersion}${endpoint}`,
        this.createOptions()
      )
      .pipe(catchError(this.handleError));
  }

  post<T>(endpoint: string, data: any): Observable<T> {
    return this.http
      .post<T>(
        `${this.apiUrl}${this.apiVersion}${endpoint}`,
        data,
        this.createOptions()
      )
      .pipe(catchError(this.handleError));
  }

  put<T>(endpoint: string, data: any): Observable<T> {
    return this.http
      .put<T>(
        `${this.apiUrl}${this.apiVersion}${endpoint}`,
        data,
        this.createOptions()
      )
      .pipe(catchError(this.handleError));
  }

  delete<T>(endpoint: string): Observable<T> {
    return this.http
      .delete<T>(
        `${this.apiUrl}${this.apiVersion}${endpoint}`,
        this.createOptions()
      )
      .pipe(catchError(this.handleError));
  }

  private handleError(error: any) {
    console.error('API Error:', error);
    return throwError(() => error);
  }
}


================================================
File: services/_core/token/token.service.spec.ts
================================================
import { TestBed } from '@angular/core/testing';

import { TokenService } from './token.service';

describe('RestService', () => {
  let service: TokenService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(TokenService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});


================================================
File: services/_core/token/token.service.ts
================================================
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';
import { environment } from '../../../../../environments/environment';

@Injectable({
    providedIn: 'root',
})
export class TokenService {
    private apiUrl = `${environment.urlBackend}/api`;
    private idToken: string | null = null; // Stored in memory

    constructor(private http: HttpClient) { }

    // Get the ID Token
    getIdToken(): string | null {
        return this.idToken;
    }

    // Set the ID Token
    setIdToken(token: string): void {
        this.idToken = token;
    }

    // Clear the ID Token
    clearIdToken(): void {
        this.idToken = null;
    }

    // Refresh the ID Token using HttpOnly cookie
    refreshIdToken(): Observable<string> {
        return this.http.get<{ idToken: string }>(
            `${this.apiUrl}/auth/refreshtoken`, 
            { withCredentials: true } // Ensure cookies are sent with the request
        ).pipe(
            tap((response: any) => {
                this.setIdToken(response.idToken); // Update the ID Token in memory
            }),
            catchError((error) => {
                this.clearIdToken();
                console.error('❌ Failed to refresh token:', error);
                return throwError(() => new Error('Failed to refresh access token'));
            }),
            map(response => response.idToken)
        );
    }
}


================================================
File: services/auth/google.service.spec.ts
================================================
import { TestBed } from '@angular/core/testing';
import { GoogleAuthService } from './google.service';

describe('GoogleAuthService', () => {
  let service: GoogleAuthService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(GoogleAuthService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});


================================================
File: services/auth/google.service.ts
================================================
import { Injectable } from '@angular/core';
import {
  Auth,
  GoogleAuthProvider,
  signInWithPopup,
  User,
} from '@angular/fire/auth';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class GoogleAuthService {
  user$: Observable<User | null>;

  constructor(private auth: Auth) {
    this.user$ = new Observable((subscriber) => {
      return this.auth.onAuthStateChanged(subscriber);
    });
  }

  async signInWithGoogle() {
    try {
      const provider = new GoogleAuthProvider();
      const result = await signInWithPopup(this.auth, provider);
      console.log('Successfully signed in:', result.user.email);
    } catch (error) {
      console.error('Error signing in with Google:', error);
    }
  }

  async signOut() {
    try {
      await this.auth.signOut();
      console.log('Successfully signed out');
    } catch (error) {
      console.error('Error signing out:', error);
    }
  }
}


================================================
File: services/profil-service/profil.service.spec.ts
================================================
import { TestBed } from '@angular/core/testing';

import { ProfilService } from './profil.service';

describe('ProfilService', () => {
  let service: ProfilService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(ProfilService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});


================================================
File: services/profil-service/profil.service.ts
================================================
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { Profil } from '../../models/profil.model';
import { RestService } from '../_core/rest/rest.service';

@Injectable({
  providedIn: 'root',
})
export class ProfilService {
  constructor(private rest: RestService) {}

  getProfil(): Observable<Profil> {
    return this.rest.get<Profil>(`/users/me/profil`);
  }

  updateProfil(profil: Partial<Profil>): Observable<Profil> {
    return this.rest.put<Profil>(`/users/me/profil`, profil);
  }

  switchNotificationState(): Observable<boolean> {
    return this.rest.put<boolean>(`/users/me/email-notif`, {});
  }

  updatePassword(lastPassword: string, newPassword: string): Observable<void> {
    return this.rest.put<void>(`/users/me/password`, {
      lastPassword: lastPassword,
      newPassword: newPassword,
    });
  }
}

